services:
  agent-server:
    image:
      ${AGENT_SERVER_IMAGE}
    container_name: agent-server
    build:
      context: .
      dockerfile: docker/Dockerfile.service
    command:
      tail -f /dev/null
    environment:
      HTTP_DATA_SERVER: data-server
      HTTP_QUERY_SERVER: query-server

      DATABASE_USER: ${DATABASE_USER}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_PORT: ${DATABASE_PORT}
      DATABASE_HOST: postgres
      DATABASE_NAME: ai_workflows
    env_file:
      - .private.env
    networks:
      - agent-server

  streamlit-app:
    build:
      context: .
      dockerfile: docker/Dockerfile.app
    depends_on:
      - agent-server
    environment:
      - AGENT_URL=http://agent-server:8080
    networks:
      - agent-server

  query-server:
    image: ${QUERY_SERVER_IMAGE}
    container_name: query-server
    environment:
      QUERY_ENV: production
      HTTP_DATA_SERVER: data-server
      HTTP_TRANSLATOR_SERVER: translator-server
      HTTP_EXPERIMENT_IMPORTER: experiment-importer
      REDIS_MASTER_HOST: redis-query
      REDIS_REPLICA_HOST: redis-query
      LOG_FORMAT: development
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      start_period: 10s 
    depends_on:
      data-server:
        condition: service_healthy
      translator-server:
        condition: service_started

    networks:
      - agent-server
    
  postgres:
    image: ${POSTGRES_IMAGE}
    container_name: postgres
    restart: always
    environment:
      POSTGRES_MULTIPLE_DATABASES: development,test,translations,ai_workflows
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_USER: ${DATABASE_USER}
      #SQL_FILE: five_real_experiments.sql
      # SQL_FILE: children_need.sql
      DB_TO_POPULATE: development
      COMMAND_SERVER_PORT: ${COMMAND_SERVER_PORT}
    networks:
      - agent-server
  
# Cache
  redis-query:
    image: ${REDIS_IMAGE}
    container_name: redis-query
    networks:
      - agent-server
  
  redis-data:
    image: ${REJSON_IMAGE}
    container_name: redis-data
    networks:
      - agent-server

  data-server:
    image: ${DATA_SERVER_IMAGE}
    container_name: data-server
    environment:
      ENV: development

      DEV_TOOLS: enabled
      APP_NAME: data-server
      SERVER_LOG_LEVEL: warn
      APPLICATION_LOG_LEVEL: debug
      LOG_FORMAT: development
      SERVER_MODE: testing
      # database connection
      # database_name is overriden in tests
      DATABASE_HOST: postgres
      DATABASE_USER: ${DATABASE_USER}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_NAME: development
      DATABASE_PORT: 5432
      DATABASE_COMMANDER_URL: http://postgres:6666
      THREADS: 1

      # redis connection details
      REDIS_MASTER_HOST: redis-data
      REDIS_REPLICA_HOST: redis-data
    depends_on:
      - redis-data
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      start_period: 10s 
    networks:
      - agent-server

  experiment-importer:
    image: ${EXPERIMENT_IMPORTER_IMAGE}
    container_name: experiment-importer
    environment:
      DATABASE_HOST: postgres
      DATABASE_USER: ${DATABASE_USER}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_NAME: development
    networks:
      - agent-server

  translator-server:
    image: ${TRANSLATOR_SERVER_IMAGE}
    container_name: translator-server
    environment:
      # development and test db's share same instance
      SOURCE_POSTGRES_HOST: postgres
      SOURCE_POSTGRES_PORT: ${DATABASE_PORT}
      SOURCE_POSTGRES_USER: ${DATABASE_USER}
      SOURCE_POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      SOURCE_POSTGRES_DATABASE: test

      TARGET_POSTGRES_HOST: postgres
      TARGET_POSTGRES_PORT: ${DATABASE_PORT}
      TARGET_POSTGRES_USER: ${DATABASE_USER}
      TARGET_POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      TARGET_POSTGRES_DATABASE: translations

      # uncomment to use the google api in development mode
      #GOOGLE_APPLICATION_CREDENTIALS: ./src/test/api-key.json
      GOOGLE_APPLICATION_CREDENTIALS: mock
      APP_NAME: translator-server

      NODE_ENV: production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      start_period: 10s 
    depends_on:
      - postgres
    networks:
      - agent-server

networks:
  agent-server:
    name: agent-server
    driver: bridge